all: ex1 ex1a ex2 ex3 ex3a ex3b ex4 ex5 ex6 ex7 ex8 ex9 ex10 egrep-1 egrep-2 egrep-3 egrep-4 egrep-5 egrep-6 egrep-7 egrep-8 egrep-9 egrep-10 egrep-11 egrep-12

CPPFLAGS=$(MYFLAGS) -g -Wall
DEPS1= rlex.cc ex1.cc
DEPS2= rlex.cc ex2.cc
DEPS3= rlex.cc ex3.cc
DEPS4= rlex.cc ex4.cc
DEPS5= rlex.cc ex5.cc
DEPS6= rlex.cc ex6.cc
DEPS7= words.l sentence
DEPS8= c-lex.l test2.c
DEPS9= trans.c test3.c
DEPS10=test1.c

cmt=echo

ex1: $(DEPS1) 
	$(cmt) "Making the Example"
	g++ $(CPPFLAGS) $(DEPS1) -o ex1
	$(cmt) "The argument is any regular Expression"
	./ex1 'abcd'
	$(cmt) "Another regular Expression"
	./ex1 '(a|b|c)?d'
	$(cmt) "Another regular Expression"
	./ex1 '(a|b)*abb'
	$(cmt) "The argument can be a Translation rule of a Lex File"
	./ex1 'ab \{printf("ab found");\}'

ex1a: $(DEPS1) 
	$(cmt) "The argument is any regular Expression"
	./ex1 '(a|b)*abb'

ex2: $(DEPS2) test4
	$(cmt) "Making the Example"
	g++ $(CPPFLAGS) $(DEPS2) -o ex2
	$(cmt) "Use the file that we used before for learning about the Regular Expressions"
	cat -n my_input
	$(cmt) "Matches b followed by zero or any number  of o then s"
	./ex2 'bo*s' my_input
	$(cmt) "Matches b followed by one or any number of o then s"
	./ex2  'bo+s'  my_input
	$(cmt) "Matches b followed by one or no o then s"
	./ex2 'bo?s' my_input
	 $(cmt) "Matches oa or ort"
	./ex2 'oa|ort' my_input
	$(cmt) "Matches oa or os followed by t"
	./ex2 '(oa|os)t' my_input
	$(cmt) "Verbose mode"
	$(cmt) "Test file containing a string"
	cat -n test4
	./ex2 -v '(a|b)*abb' test4

ex3: $(DEPS3)
	$(cmt) "Making the Example"
	g++ $(CPPFLAGS) $(DEPS3) -o ex3
	$(cmt) "The NFA and the corresponding DFA for ab*c"
	./ex3 'ab*c'
	$(cmt) "The NFA and the corresponding DFA for (a|b|c)+abb"
	./ex3  '(a|b|c)+abb'
	$(cmt) "Verbose mode"
	./ex3 -v 'ab'
	$(cmt) "Another Regular Expression"
	./ex3 -v  '(a|b)+cd'
	$(cmt) "Another Regular Expression"
	./ex3 -v  '(a|b)*abb'

ex3a: $(DEPS3)
	$(cmt) "The NFA and the corresponding DFA for ab*c"
	./ex3 'ab*c'


ex3b: $(DEPS3)
	$(cmt) "The NFA and the corresponding DFA for (a|b|c)+abb"
	./ex3  '(a|b|c)+abb'


ex4: $(DEPS4) test5
	$(cmt) "Making the Example"
	g++ $(CPPFLAGS) $(DEPS4) -o ex4
	$(cmt) "Use the file that we used before for learning about the Regular Expressions"
	cat -n my_input
	$(cmt) "Matches b followed by zero or any number  of o then s"
	./ex4 'bo*s' my_input
	$(cmt) "Matches b followed by one or any number of o then s"
	./ex4  'bo+s'  my_input
	$(cmt) "Matches b followed by one or no o then s"
	./ex4 'bo?s' my_input
	$(cmt) "Matches oa or ort"
	./ex4 'oa|ort' my_input
	$(cmt) "Matches oa or os followed by t"
	./ex4 '(oa|os)t' my_input
	$(cmt) "Verbose mode"
	$(cmt) "Test file containing strings"
	cat -n test5
	./ex4 -v  '(a|b)*abb' test5


ex5: $(DEPS5)
	$(cmt) "Making the Example"
	g++ $(CPPFLAGS) $(DEPS5) -o ex5
	$(cmt) "Verbose mode"
	$(cmt) "Minimizing DFA States"
	./ex5 -v  '(a|b)*abb'
	$(cmt) "Another Regular Expression"
	./ex5 -v  '(a|b|c)+'

ex6: $(DEPS6) test8.c
	$(cmt) "Building the lexical Analyser Generator"
	g++ $(CPPFLAGS) $(DEPS6) -o rlex
	$(cmt) "Compiling Lex file using rlex to generate C Code for Lexical Analyzer"
	./rlex keywords.l >out.c
	$(cmt) "Building Lexical Analyzer Binary"
	gcc -g out.c -o lexer
	$(cmt) "Input file to be tokenized"
	cat -n test8.c
	$(cmt) "Lexical Analyzer at work !"
	./lexer test8.c

ex7: $(DEPS7)
	$(cmt) "The creation of words.l  file is Step 1 . It is not shown here"
	$(cmt) "Compiling the Lexical Specification File, Step 2"
	flex words.l
	$(cmt) "lex.yy.c generated by previous command"
	$(cmt) "Compiling it to build lexical Analyzer, , Step3"
	gcc lex.yy.c -o eng_lex_analyzer -lfl
	$(cmt) "Input to Lexical Analyzer"
	cat -n sentence
	$(cmt) "Lexical Analyzer at work on the input file"	
	./eng_lex_analyzer sentence

ex8: $(DEPS8) test2.c
	$(cmt) "Compiling the Lexical Specs to generate lex.yy.c"
	flex c-lex.l
	$(cmt) "Compiling the lex.yy.c to generate a binary"
	gcc lex.yy.c -o lex_analyzer -lfl
	$(cmt) "Input C Program for tokenizing"
	cat -n test2.c
	$(cmt) "Lexical Analyzer Tokenizing the input C Program"
	./lex_analyzer test2.c

ex9: $(DEPS9) test3.c
	$(cmt) "Compiling trans.c to get a Binary"
	gcc -Wall trans.c -o trans
	$(cmt) "Sample input file"
	cat -n test3.c
	$(cmt) "Tokenizing the input C Program"
	./trans test3.c

ex10: $(DEPS10)
	$(cmt) "An input C program. A semicolon (;) is missing in Line 5 "
	cat -n test1.c
	$(cmt) "Compiling the C Program"
	gcc test1.c -o test1

egrep-1: my_input
	$(cmt) "-n option for showing line numbers"
	cat -n my_input

egrep-2: my_input
	$(cmt) "Match any line with s"
	egrep -n -e 's' my_input

egrep-3: my_input
	$(cmt) "Character s followed by t"
	egrep -n -e 'st' my_input

egrep-4: my_input
	$(cmt) "o followed by any char then by t"
	egrep -n -e 'o.t' my_input

egrep-5: my_input
	$(cmt) "b is the first letter in the line"
	egrep -n -e '^b' my_input

egrep-6: my_input
	$(cmt) "t is the last letter in the line"
	egrep -n -e 't$$' my_input

egrep-7: my_input
	$(cmt) "Matches a or t or s"
	egrep -n -e '[ats]' my_input

egrep-8: my_input
	$(cmt) "Matches p or q or s"
	egrep -n -e '[p-s]' my_input

egrep-9: my_input
	$(cmt) "Matches any char other than b followed by a"
	egrep -n -e '[^b]a' my_input

egrep-10: my_input
	$(cmt) "Matches b followed by zero or any number of o then s"
	egrep -n -e 'bo*s' my_input
	$(cmt) "Matches b followed by one or any number of o then s"
	egrep -n -e 'bo+s' my_input
	$(cmt) "Matches b followed by one or no o then s"
	egrep -n -e 'bo?s' my_input
	$(cmt) "Matches b followed by 1 or 2 instances of o followed by s"
	egrep -n -e 'bo{1,2}s' my_input

egrep-11: my_input
	$(cmt) "Matches oa or ort"
	egrep -n -e 'oa|ort' my_input

egrep-12: my_input
	$(cmt) "Matches oa or os followed by t"
	egrep -n -e '(oa|os)t' my_input

listing: words.l
	mklist words.l listing2.1.rtf
		

clean: 
	rm -f *.o ex[1-6] ex[1-6]*.exe  lex_analyzer.exe *.debug eng_lex_analyzer.exe trans.exe lex.yy.c lexer.exe rlex.exe out.c
